package org.cbioportal.G2Smutation.web.controllers;

import java.awt.print.Pageable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;


import org.apache.commons.lang3.StringUtils;
import org.cbioportal.G2Smutation.scripts.PdbScriptsPipelineRunCommand;

import org.cbioportal.G2Smutation.web.database.mutation_usage_table;

import org.cbioportal.G2Smutation.web.database.rs_mutation_entry;
import org.cbioportal.G2Smutation.web.database.pdb_seq_alignment;
import org.cbioportal.G2Smutation.web.database.mutationRepository;
import org.cbioportal.G2Smutation.web.database.rsRepository;
import org.cbioportal.G2Smutation.web.database.pdbRepository;
import org.cbioportal.G2Smutation.web.domain.StatisticsRepository;
import org.cbioportal.G2Smutation.web.models.InputAlignment;
import org.cbioportal.G2Smutation.web.models.InputSequence;
import org.cbioportal.G2Smutation.web.models.Statistics;
import org.cbioportal.G2Smutation.web.models.InputResidue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 * Main Controller of the whole website Control the input sequence to blast
 * Mainly use InputSequence in model
 * 
 * @author Juexin wang
 * 
 */
@Controller
public class MainController {
	
	@Autowired
	private mutationRepository mutationRepository;
	// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	
	@Autowired
	private rsRepository RsRepository;
	// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	
	@Autowired
	private pdbRepository pdbRepository;
	// This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	
    @Autowired
    private StatisticsRepository statisticsRepository;
    
    @Autowired
    HttpServletRequest request;


    @GetMapping("/sequence")
    public ModelAndView inputForm(Model model) {
        model.addAttribute("inputsequence", new InputSequence());
        return new ModelAndView("sequence");
    }

    @PostMapping("/sequence")
    public ModelAndView resultBack(@ModelAttribute @Valid InputSequence inputsequence, BindingResult bindingResult,
            HttpServletRequest request) {
        if (bindingResult.hasErrors()) {
            return new ModelAndView("sequence");
        }

        // is client behind something?
        String ipAddress = request.getHeader("X-FORWARDED-FOR");
        if (ipAddress == null) {
            ipAddress = request.getRemoteAddr();
        }

        inputsequence.setId(ipAddress);
        // inputsequence.setSequence(inputsequence.getSequence());

        PdbScriptsPipelineRunCommand pdbScriptsPipelineRunCommand = new PdbScriptsPipelineRunCommand();
        List<InputAlignment> alignments = pdbScriptsPipelineRunCommand.runCommand(inputsequence);

        // Instant instant = Instant.now ();
        // inputsequence.setTimenow(instant.toString());
        inputsequence.setTimenow(LocalDateTime.now().toString().replace("T", " "));

        List<InputResidue> residues = new ArrayList<InputResidue>();
        int inputAA = 0;
        if (inputsequence.getResidueNumList().size() != 0) {
            inputAA = Integer.parseInt(inputsequence.getResidueNumList().get(0));
        }

        for (InputAlignment ali : alignments) {
            // if getResidueNum is empty, then return alignments
            // else, return residues
            if (inputsequence.getResidueNumList().size() == 0
                    || (inputAA >= ali.getSeqFrom() && inputAA <= ali.getSeqTo())) {
                InputResidue re = new InputResidue();
                re.setAlignmentId(ali.getAlignmentId());
                re.setBitscore(ali.getBitscore());
                re.setChain(ali.getChain());
                re.setSeqAlign(ali.getSeqAlign());
                re.setSeqFrom(ali.getSeqFrom());
                re.setSeqId(ali.getSeqId());
                re.setSeqTo(ali.getSeqTo());
                re.setSegStart(ali.getSegStart());
                re.setEvalue(ali.getEvalue());
                re.setIdentity(ali.getIdentity());
                re.setIdentp(ali.getIdentp());
                re.setMidlineAlign(ali.getMidlineAlign());
                re.setPdbAlign(ali.getPdbAlign());
                re.setPdbFrom(ali.getPdbFrom());
                re.setPdbId(ali.getPdbId());
                re.setPdbNo(ali.getPdbNo());
                re.setPdbSeg(ali.getPdbSeg());
                re.setPdbTo(ali.getPdbTo());

                if (!(inputsequence.getResidueNumList().size() == 0)) {
                    re.setResidueName(
                            ali.getPdbAlign().substring(inputAA - ali.getSeqFrom(), inputAA - ali.getSeqFrom() + 1));
                    re.setResidueNum(new Integer(
                            Integer.parseInt(ali.getSegStart()) - 1 + ali.getPdbFrom() + (inputAA - ali.getSeqFrom()))
                                    .toString());
                }
                // For percentage
                int queryLength = ali.getSeqAlign().length();
                int targetLength = ali.getPdbAlign().length();
                int queryGapLength = StringUtils.countMatches(ali.getSeqAlign(), "-");
                int targetGapLength = StringUtils.countMatches(ali.getPdbAlign(), "-");
                int gapLength = Math.abs(queryGapLength - targetGapLength);

                // Test:
                if (queryLength != targetLength) {
                    System.out.println("Error! in " + ali.getPdbNo());
                }

                re.setIdentityPercentage(String.format("%.2f", ali.getIdentity() * 1.0f / queryLength));
                re.setPositivePercentage(String.format("%.2f", ali.getIdentp() * 1.0f / queryLength));
                re.setGapPercentage(String.format("%.2f", gapLength * 1.0f / queryLength));
                re.setGap(gapLength);
                re.setLength(queryLength);
                re.setIdentityPercentageStr("(" + ali.getIdentity() + "/" + queryLength + ")");
                re.setPositivePercentageStr("(" + ali.getIdentp() + "/" + queryLength + ")");
                re.setGapPercentageStr("(" + gapLength + "/" + queryLength + ")");

                // Parameters for output TODO: not optimize
                re.setParaEvalue(inputsequence.getEvalue());
                re.setWord_size(inputsequence.getWord_size());
                re.setGapopen(inputsequence.getGapopen());
                re.setGapextend(inputsequence.getGapextend());
                re.setMatrix(inputsequence.getMatrix());
                re.setComp_based_stats(inputsequence.getComp_based_stats());
                re.setThreshold(inputsequence.getThreshold());
                re.setWindow_size(inputsequence.getWindow_size());

                re.setBlast_dblen(ali.getBlast_dblen());
                re.setBlast_dbnum(ali.getBlast_dbnum());
                re.setBlast_effspace(ali.getBlast_effspace());
                re.setBlast_entropy(ali.getBlast_entropy());
                re.setBlast_hsplen(ali.getBlast_hsplen());
                re.setBlast_kappa(ali.getBlast_kappa());
                re.setBlast_lambda(ali.getBlast_lambda());
                re.setBlast_reference(ali.getBlast_reference());
                re.setBlast_version(ali.getBlast_version());

                re.setTimenow(inputsequence.getTimenow());

                // input
                re.setSequence(inputsequence.getSequence());
                if (inputsequence.getResidueNumList().size() != 0) {
                    re.setInputResidueNum(inputsequence.getResidueNumList().get(0));
                } else {
                    re.setInputResidueNum("");
                }

                residues.add(re);
            }
        }
        return new ModelAndView("/result", "residues", residues);
    }

    // Original Mapping
    @GetMapping("/pageapi")
    public ModelAndView apiInfo() {
        return new ModelAndView("api");
    }

    @GetMapping("/clients")
    public ModelAndView clientsInfo() {
        return new ModelAndView("clients");
    }
    
    /*
    @GetMapping("/statistics")
    public ModelAndView statisticsInfo(Model model) {
        List<Statistics> statistics = statisticsRepository.findTop2ByOrderByIdDesc();
        return new ModelAndView("/statistics", "statistics", statistics);
    }
    */

    @GetMapping("/about")
    public ModelAndView aboutInfo() {
        return new ModelAndView("about");
    }
    
    @GetMapping("/contact")
    public ModelAndView contactInfo() {
        return new ModelAndView("contact");
    }

    @GetMapping("/")
    public ModelAndView homeInfo() {
        return new ModelAndView("frontpage");
    }
    
    // For rs database
    Integer rsAll;
    Integer rsPerPage = 15;
    @GetMapping("/rs")    
    public ModelAndView RSInfo(@RequestParam(value="number",defaultValue = "1") Integer number,Model model){
        //Integer all = RsRepository.findAll().size();
        //rsAll=all;
    	//Integer max = (all/perPage)+1;
    	//model.addAttribute("top",max);
    	
    	// First page
        List<rs_mutation_entry> datapage=RsRepository.findByrsIdBetween(0, rsPerPage);        
        model.addAttribute("data", datapage);
        model.addAttribute("number",number);
        return new ModelAndView("rs");
    }
    
    @RequestMapping("/rsPage")  
    public ModelAndView rsPageGet(HttpServletRequest request,Model model){
        String page = request.getParameter("number");
        Integer number = Integer.valueOf(page);
        //Integer all = rsAll;
        //Integer max = (all/perPage)+1;
        //model.addAttribute("top",max);
        
        //if (number>=max) number=max;
        Integer low = (number-1)*rsPerPage+1;
        Integer high = number*rsPerPage;
        List<rs_mutation_entry> datapage=RsRepository.findByrsIdBetween(low, high);

        model.addAttribute("data", datapage);
        model.addAttribute("number",number);
        return new ModelAndView("rs");
    }
    
    // For regular database
    Integer databaseAll;
    Integer databasePerPage = 10;
    @GetMapping("/database")    
    public ModelAndView databaseInfo(@RequestParam(value="number",defaultValue = "1") Integer number,Model model){
    	//List<mutation_usage_table> dataall = userRepository.findAll();
        //Integer all = dataall.size();
    	//Integer all = userRepository.findAll().size();  	
        //Integer max = (all/databasePerPage)+1;
    	//model.addAttribute("top",max);
        
    	// First page
    	List<mutation_usage_table> datapage=mutationRepository.findBydatabaseIdBetween(0,databasePerPage);

        model.addAttribute("data", datapage);
        model.addAttribute("number",number);
        return new ModelAndView("database");
    }
    
    @RequestMapping("/databasePage")  
    public ModelAndView databasePageGet(HttpServletRequest request,Model model){
        String page = request.getParameter("number");
        Integer number = Integer.valueOf(page);
        
        Integer low = (number-1)*databasePerPage+1;
        Integer high = number*databasePerPage;
        List<mutation_usage_table> datapage = mutationRepository.findBydatabaseIdBetween(low, high);
        
        model.addAttribute("data", datapage);
        model.addAttribute("number",number);
        //model.addAttribute("top",max);
        return new ModelAndView("database");
    }
    
    // AlignmentId Page
    @RequestMapping(value = "/AlignmentIdPage",method = RequestMethod.GET)
    public ModelAndView getAlignmentIdPage(Model model, HttpServletRequest request){
        String AlignmentId = request.getParameter("AlignmentId");
        List<mutation_usage_table> alignmentdata = mutationRepository.findByalignmentId(Integer.parseInt(AlignmentId));
        model.addAttribute("data", alignmentdata);

        List<pdb_seq_alignment> alignmentdetails = pdbRepository.findByalignmentId(Integer.parseInt(AlignmentId));
        model.addAttribute("details", alignmentdetails);
        return new ModelAndView("alignmentId");
    }
    
    // For search
    public List<mutation_usage_table> searchData;
    public Integer searchPerPage = 10;
    Integer searchMaxPage=1;
    Integer totalCount;
    /*
    @GetMapping("/search")
    public ModelAndView searchInfo(@RequestParam(value="number",defaultValue = "1") Integer number,Model model){
        Integer totalCount = searchData.size();
        Integer requestCount = totalCount / searchPerPage;
        Integer fromIndex = (number-1) * searchPerPage;
        int toIndex = Math.min(totalCount, number * searchPerPage);
        List<mutation_usage_table> subList = searchData.subList(fromIndex, toIndex);
        
        model.addAttribute("data", subList);
        model.addAttribute("number",number);
        model.addAttribute("top",requestCount);
        return new ModelAndView("search");
    }
    */
    
    @RequestMapping("/searchPage")  
    public ModelAndView searchPageGet(HttpServletRequest request,Model model){
        String page = request.getParameter("number");
        Integer number = Integer.valueOf(page);
        if (number>=searchMaxPage) number=searchMaxPage;
        
        Integer low = (number-1)*searchPerPage;
        Integer high = Math.min(totalCount, number * searchPerPage);
        List<mutation_usage_table> datapage = searchData.subList(low, high);

        model.addAttribute("data", datapage);
        model.addAttribute("number",number);
        model.addAttribute("requestCount", searchMaxPage);
        return new ModelAndView("search");
    }
    
    @RequestMapping("/search/unionSearch")  
    public ModelAndView searchGetSEQRESIDUE(HttpServletRequest request,Model model){  
        String SEQRESIDUE = request.getParameter("SEQRESIDUE");
        String PDBINDEX = request.getParameter("PDBINDEX");
        String PDBRESIDUE = request.getParameter("PDBRESIDUE");
        List<mutation_usage_table> datafindSEQRESIDUE;
        
        if (PDBINDEX.equals("") && PDBRESIDUE.equals("")) { datafindSEQRESIDUE=mutationRepository.findBySeqResidueOrderByPdbIndex(SEQRESIDUE);}
        else if (PDBINDEX.equals("") && SEQRESIDUE.equals("")) { datafindSEQRESIDUE=mutationRepository.findBypdbResidueOrderByPdbIndex(PDBRESIDUE);}
        else if (SEQRESIDUE.equals("") && PDBRESIDUE.equals("")) { datafindSEQRESIDUE=mutationRepository.findBypdbIndex(Integer.parseInt(PDBINDEX));}
        
        else if (SEQRESIDUE.equals("")) { datafindSEQRESIDUE=mutationRepository.findBypdbIndexAndPdbResidue(Integer.parseInt(PDBINDEX),PDBRESIDUE);}
        else if (PDBINDEX.equals("")) { datafindSEQRESIDUE=mutationRepository.findByseqResidueAndPdbResidue(SEQRESIDUE,PDBRESIDUE);}
        else if (PDBRESIDUE.equals("")) { datafindSEQRESIDUE=mutationRepository.findBypdbIndexAndSeqResidue(Integer.parseInt(PDBINDEX),SEQRESIDUE);}
        
    	else {datafindSEQRESIDUE=mutationRepository.findBySeqResidueAndPdbResidueAndPdbIndex(SEQRESIDUE,PDBRESIDUE,Integer.parseInt(PDBINDEX));}
        
        searchData=datafindSEQRESIDUE;
        totalCount = datafindSEQRESIDUE.size();
        Integer requestCount = totalCount / searchPerPage;
        searchMaxPage = Math.max(1, requestCount);
        model.addAttribute("requestCount", searchMaxPage);
        
        // First page
        Integer number = 1;
        int toIndex = Math.min(totalCount,searchPerPage);
        List<mutation_usage_table> subList = datafindSEQRESIDUE.subList(0, toIndex);

        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");
    }
    
    @RequestMapping("/search/PDBNO")  
    public ModelAndView searchGetPDBNO(HttpServletRequest request,Model model){  
        String PDBNO = request.getParameter("PDBNO");
    	List<mutation_usage_table> datafindPDBNO = mutationRepository.findBypdbNoStartingWith(PDBNO);
    	searchData=datafindPDBNO;
    	totalCount = datafindPDBNO.size();
    	
        Integer totalCount = datafindPDBNO.size();
        Integer requestCount = totalCount / searchPerPage==0?1:totalCount / searchPerPage;
        model.addAttribute("requestCount", requestCount);
        
        // First page
        Integer number = 1;
        int toIndex = Math.min(totalCount, (0 + 1) * searchPerPage);
        List<mutation_usage_table> subList = datafindPDBNO.subList(0, toIndex);

        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");	
    }
    
    /*
    @RequestMapping("/search")  
    public ModelAndView searchGet(HttpServletRequest request,Model model){
        String pdbNo = request.getParameter("pdbNo");
    	List<mutation_usage_table> datafind3=userRepository.findBypdbNoStartingWith(pdbNo);
        model.addAttribute("data3", datafind3);
        return new ModelAndView("search");
    }
    // EVALUE、BITSCORE、IDENTITY、IDENTP
    @RequestMapping("/detail/EVALUE")  
    public ModelAndView detailGetEVALUE(HttpServletRequest request,Model model){  
        String evalueHigh = request.getParameter("evalueHigh");     
    	List<mutation_usage_table> findEvalue = userRepository.findByevalueBetween(0,Integer.parseInt(evalueHigh));
    	searchData=findEvalue;
        
        Integer totalCount = findEvalue.size();
        Integer requestCount = totalCount / pageLimit;
        model.addAttribute("requestCount", requestCount);
        
        // First page
        Integer number = 1;
        Integer fromIndex = 0 * pageLimit;
        int toIndex = Math.min(totalCount, (0 + 1) * pageLimit);
        List<mutation_usage_table> subList = findEvalue.subList(fromIndex, toIndex);

        model.addAttribute("top",requestCount);
        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");	
    	
        //model.addAttribute("dataEvalue", findEvalue);
        //return new ModelAndView("detail");        
    }
    
    @RequestMapping("/detail/BITSCORE")  
    public ModelAndView detailGetBITSCORE(HttpServletRequest request,Model model){  
        String bitscoreLow = request.getParameter("bitscoreLow");
    	List<mutation_usage_table> findBitscore = userRepository.findBybitscoreBetween(Double.parseDouble(bitscoreLow),Double.MAX_VALUE);
    	searchData=findBitscore;
        
        Integer totalCount = findBitscore.size();
        Integer requestCount = totalCount / pageLimit;
        model.addAttribute("requestCount", requestCount);
        
        // First page
        Integer number = 1;
        Integer fromIndex = 0 * pageLimit;
        int toIndex = Math.min(totalCount, (0 + 1) * pageLimit);
        List<mutation_usage_table> subList = findBitscore.subList(fromIndex, toIndex);

        model.addAttribute("top",requestCount);
        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");	
    	
        //model.addAttribute("dataEvalue", findBitscore);
        //return new ModelAndView("detail");        
    }
    
    @RequestMapping("/detail/IDENTITY")  
    public ModelAndView detailGetIDENTITY(HttpServletRequest request,Model model){  
        String identityLow = request.getParameter("identityLow");
        String identityHigh = request.getParameter("identityHigh"); 
    	List<mutation_usage_table> findIdentity = userRepository.findByidentityBetween(Integer.parseInt(identityLow),Integer.parseInt(identityHigh));
    	searchData=findIdentity;
        
        Integer totalCount = findIdentity.size();
        Integer requestCount = totalCount / pageLimit;
        model.addAttribute("requestCount", requestCount);
        
        // First page
        Integer number = 1;
        Integer fromIndex = 0 * pageLimit;
        int toIndex = Math.min(totalCount, (0 + 1) * pageLimit);
        List<mutation_usage_table> subList = findIdentity.subList(fromIndex, toIndex);

        model.addAttribute("top",requestCount);
        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");	
    	
        //model.addAttribute("dataEvalue", findIdentity);
        //return new ModelAndView("detail");        
    }
    
    @RequestMapping("/detail/IDENTP")  
    public ModelAndView detailGetIDENTP(HttpServletRequest request,Model model){  
        String identpLow = request.getParameter("identpLow");
        String identtpHigh = request.getParameter("identpHigh"); 
    	List<mutation_usage_table> findIdentp = userRepository.findByidentpBetween(Double.parseDouble(identpLow),Double.parseDouble(identtpHigh));
    	searchData=findIdentp;
        
        Integer totalCount = findIdentp.size();
        Integer requestCount = totalCount / pageLimit;
        model.addAttribute("requestCount", requestCount);
        
        // First page
        Integer number = 1;
        Integer fromIndex = 0 * pageLimit;
        int toIndex = Math.min(totalCount, (0 + 1) * pageLimit);
        List<mutation_usage_table> subList = findIdentp.subList(fromIndex, toIndex);

        model.addAttribute("top",requestCount);
        model.addAttribute("number",number);
    	model.addAttribute("data", subList);
        return new ModelAndView("search");	
    	
        //model.addAttribute("dataEvalue", findIdentp);
        //return new ModelAndView("detail");        
    }
    */
    
    @GetMapping("/detail")
    public ModelAndView detailInfo(Model model) {
        return new ModelAndView("detail");
    }
    
    // Two ways for 3D PDB structure
    @RequestMapping(value = "/3Dmol",method = RequestMethod.GET)
    public ModelAndView indexback(Model model, HttpServletRequest request){
        String padInfo = request.getParameter("pdbInfo");
        String pdb;
        pdb= padInfo.substring(0,4);
        String  chain= padInfo.substring(5,6);
        String resi = padInfo.substring(8);
    	String dataSelect2 = "chain:"+chain;
    	String dataSelect3 = "chain:"+chain+";resi:"+resi;
    	
    	model.addAttribute("dataSelect2", dataSelect2);
    	model.addAttribute("dataSelect3", dataSelect3);
    	model.addAttribute("pdb", pdb);
        model.addAttribute("chain", chain);
    	model.addAttribute("resi", resi);

        return new ModelAndView("3Dmol");
    }
    
    @RequestMapping(value = "/ngl",method = RequestMethod.GET)
    public ModelAndView bglback(Model model, HttpServletRequest request){
        String padInfo = request.getParameter("pdbInfo2");
        String  pdb= padInfo.substring(0,4);
        String  chain= padInfo.substring(5,6);
        String resi = padInfo.substring(8);
        String loadFile = "rcsb://"+pdb;
        String Selection = resi+":"+chain;
        
        model.addAttribute("loadFile", loadFile);
        model.addAttribute("Selection", Selection);
    	model.addAttribute("pdb", pdb);
        model.addAttribute("chain", chain);
    	model.addAttribute("resi", resi);

        return new ModelAndView("ngl");
    }

}
